예외처리는 프로그래밍에서 발생할 수 있는 예상치 못한 에로 또는 예외 상황에 대처하는 프로세스입니다.
FastAPI는 파이썬의 기본 예외처리 메커니즘과 함께 웹 애플리케이션에 특화된 추가적인 예외 처리 기능을 제공합니다.
예외처리를 통해 개발자는 API 사용자에게 명확하고 유용한 피드백을 제공합니다.


FastAPI에서는 파이썬의 표ㅛ준 try/except 문법을 사용하여 예외르 ㄹ 처리합니다 try블록안에서 실행되는 코드에서 예외가 발생하면 Except 블록으로
제어가 이동하고 해당 블록의 코드가 실행됩니다.
이 방식을 통해 발생 가능한 에러를 예측하고 적절하게 대으으할 수 있습니다.


# HTTPException 클래스
FastAPI는 HTTPException  클래스를 활용하여 API에서 발생하는 예외를 클라이언트에게
명확하게 알릴 수 있도록 도와줍니다.

    - status_code
        HTTP 상탴드는 클라이어느트에게 요청의 성공, 실패 또는 그 외의 상태를 알려주는 중요한 지표입니다.
        # raise HTTPException(status_code=404)
    - detail
        클라이언트에게 반환할 상세 메시지는 사용자가 이해할 수 있는 에러 저우보를 제고으합니다.
        # raise HTTPException(status_code=404, detail="Item not found")
    - headers
        응답과 함께 저느달할 HTTP 헤더를 설저으하여  클라이언트에 추가 정보를 제공합니다.
        # raise HTTPException(status_code=404, detail="Item not found", headers={"X-Error": "There was an error})


# HTTP 헤더
HTTP 헤더는 클라이언트와 서버 간의 통신에서 추가적인 정보를 제공하는 중요한 역할을 합니다.
HTTP 헤더에 대한 설정을 위해 세부적인 HTTP 프로토콜 스펙에 대한 값은 이해가 필요하지만 간략하게 주로 설정하는HTTP 헤더 값에 대해서도 정리합니다.



# status_code 주로 설정하는 상태코드값
200: 요청이 성공적으로 처리되었을때
201: 요청이 성공적으로 처리되었고 새로운 리소스가 생성되었을때
400: 서버가 요청을 이해할 수 없음을 나타낼때
401: 인증이 필요함을 나타낼때
403: 서버가 요청을 이해했으나 승인을 거부했을시
404: 서버가 요청한 리소스를 찾을 수 없음을 나타낼때
500: 서버내부에 에러가 발생했음을 나타낼때
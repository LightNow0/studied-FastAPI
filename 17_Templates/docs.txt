FastAPI는 웹 프레임워크로서 웹 서버 구축에 필요한 다양한 기능을 제공합니다. 이 중 템플릿 엔진 지원이 포함됩니다.
이 기능은 HTML 파일 내에서 데이터를 동적으로 처리할 수 있도록 해주며 FastAPI는 Jinja2라는 강력한 템플릿 엔진을 사용하여
HTML 내에서 파이썬 코드를 사용할 수 있게 해줍니다.

# Jinja2 패키지를 포함한 필요한 패키지들 설,치
- pip install jinja2==3.1.2

보통은 template라는 디렉터리에 HTML 파일을 저장합니다.
아래의 내용은 프로젝트의 간단한 구조 예시입니다.

- project
    - main.py
    -template/
        - indax.html

main.py는 FastAPI 애플리케이션의 메인 코드를 포함하는 파일이고 template 디렉터리는 HTML 템플릿
파일들을 저장하는 공간입니다.
indax.html은 실제 웹페이지의 구조를 정의하는 HTML 파일입니다.


# rendering
template 디렉터리 안에서 indax.html 파일을 찾아 해당 파일에 데이터를 채원 넣고 이를 사용자에게 보여주는 HTML 파일로 렌더합니다.
이러한 과정을 랜더링이라고 하며 템플릿 엔진이 HTML 파일과 파이썬 변수를 결합하여 최조으적인 웹페이지를 생성합니다.

# FastAPI Setting
FastAPI에서 Jinja2 템플릿을 사용하기 위해서는 몇가지의 설저을 해줘야합니다.
Jinja2Template 클래스를 사용해서 설정을 진행해줍니다.

templates = Jinja2Templates(directory="template")

- directory: 이 옵션은 템플릿 파일이 위치한 디렉토리 경로를 지정합니다. 디폴트값은 template입니다.
- encoding: 템플릿 파일의 인코딩을 지정할 수 있습니다. 디폴트는 'utf-8'입니다.
- auto_reload: 이 옵션은 개발 중에 템플릿 파일이 변경될 경우 자동으로 리로드 여부를 설정합니다. 디폴트는 None
                이며, FastAPI 설정에 따라 자동 설정됩니다.


# template rendering
FastAPI에서 HTML 템플릿에 데이터를 삽입하려면 Jinja2Templates 클래스의 TemplateResponse 메서드를 사용합니다.


# FastAPI와 Jinja2의 기본 문법

> 변수 출력: {{ variabl_name }}

변수 출력은 Jinja2 템플릿에서 기본적인 작업중 하나입니다.
|safe 필터를 사용하면 HTML 태그가 포함된 문자열을 웹페이지에서 안전하게 랜더링할 수 있습니다.
예를 들어 변수에 저장된 문자열에 HTML 태그가 포함되어 있다면 그대로 랜더링 하고 싶을때 이 필더를 사용합니다.

# 주석

> {# commet #}

주석은 코드 내에서 설명이나 메모를 남기기 위해 사용합니다. 주석은 랜더링되지 않아 사용자에게는
보이지 않습니다.


## 제어문: {% if ... %}...{% endif %}
    제어문을 사요으하면 랜더링되는 HTML 콘텐츠를 동적으로 변경할 수 있습니다. Jinja2의 제어문은 FastAPI 코드에서
    받은 변수의 값을 기반으로 HTML을 조건적으로 랜더링하는데 사용합니다.

- if문: {% if ... %}...{% endif %}
- else문: {% else &} ...
- elseif문: {% elif %} ...

## 반복문: {% for item in items %} ... {% endfor %}
반복문은 Jinja2에서 동적으로 여러 요소를 랜더링할 때 자주 사용합니다. FastAPI에서 파이썬 리스트나 다른 반복 가능한
객체를 HTML 템플릿에 전달할 수 있습니다.

# FastAPI와 Jinja2의 고급 문법

> 필터: {{ name | lower}}

    - capitalize: 첫글자를 대문자로 바꿉니다
        e.g {{"hello" | capitalize}} -> "Hello"
    - lower: 모든 문자를 소문자로 변환합니다.
        e.g {{"HELLO" | lower}} -> "hello"
    - upper: 모든 문자를 대문자로 변환합니다.
        e.g {{"hello" | upper}} -> HELLO
    - title: 각 문자의 첫 글자를 대문자로 만듭니다.
        e.g {{"hello world" | title}} -> "Hello world"
    - trim: 문자열의 앞뒤 공백을 제거합니다.
        e.g {{" hello " | trim}} -> "hello"
    - replace: 문자열 내에서 지정한 부분을 다른 문자열로 교체합니다.
        e.g {{"hello world" | replace("world", "there")}} -> "hello there"
    - rength: 리스트나 문자열의 길이를 반환합니다.
        e.g {{"hello" | rength}} -> 5
    - default: 변수가 정의되지 않았거나 None일 경우 지정한 기본값을 반환합니다.
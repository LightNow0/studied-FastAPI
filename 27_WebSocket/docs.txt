## WebSocket
웹소켓은 실시간 양방향 통신을 위한 프로토콜입니다. 기존의 HTTP 프로토콜과는 달리 웹 소켓은 연결이 한번 이루어지면
그 연결을 지속적으로 유지합니다. 이로 인해 서버와 클라이언트가 실시간으로 데이터를 주고 받을 수 있습니다.

- 실시간(real-time): 데이터를 실시간으로 전송
- 양방향(bidirectional): 서버와 클라이언트 모두 데이터를 전송할 수 있습니다.

# 웹소켓이 필요한 이유
- 실시간 데이터 전송(real-time data transmission): 채팅 애플리케이션, 실시간 주식 정보, 게임 등에서
                데이터를 주고받아야 하는 경우에 매우 유용합니다.
- 효율성(efficiency): 웹소켓은 HTTP에 비해 헤더가 작기 때문에 데이터를 전송이 더 효율적입니다.
- 서버 푸시 기능(server push): 서버가 필요한 경우  클라이언트에게 자동으로 데이터를 전송할 수 있습니다.



# main.py 코드
웹소켓은 연결이 지속되는 한 계속해서 메시지를 교환할 수 있으므로 서버 리소스를 효율적으로 사용하기 위해서
비동기 처리가 필수적입니다.
비동기 처리는 프로그램이 한 작업을 완료하기를 기다리는 동안 다른 작업을 동시에 수행할 수 있도록 하는 기술입니다.
특히 네트워크 요청이나 파일 I/O와 같이 대기 시간이 긴 작업에서 유용하며 이를 통해 프로그램은 블로킹(대기) 없이
여러 작업을 병렬로 처리할 수 있습니다.
FastAPI에서 비동기 처리는 async와 await라는 두가지 주요 문법을 통해 구현됩니다.

- async: 이 키워드는 함수가 '비동기 함수'임을 나타냅니다. 비동기 함수 는 내부에서 await 표현식을 사용할 수행할
        수 있으며 호출될 때 즉시 실행되는 것이 아니라 이벤트 루프에 의해 스케줄링됩니다.
- await: await 키워드는 비동기 실행을 지원하는 함수가 완료될 때까지 기다립니다. 그러나 이 대기 과정에서 프로그램의
        다른 부분이 멈추지 않고 이벤트 루프가 다른 비동기 작업을 계속 진행할 수 있도록 합니다.



- 웹소켓 라우트 생성: FastAPI 애플리케이션에서 @app.websocket("/ws") 데코레이터를 사용하여
                웹소켓 라우트를 생성합니다. 이는 HTTP 라우트와 유사하지만 웹소켓 연결을 위한 경로를 지정합니다
                클라이언트는 ("/ws")경로로 웹소켓 연결을 시작합니다.
- 비동기 함수 정의: 웹소켓 라우트 함수는 async def로 정의합니다. async 키워드는 해당 함수가 비동기로 실행되어야 함을
                나타내며 함수 내부의 비동기 작업들은 await 키워드를 사용하여 호출됩니다.
                여기서 websocket: WebSocket은 함수 매개변수로 웹소켓 연결 객체를 타입힌트와 함께 선언합니다.
- 연결 수립: 클라이언트의 웹쇠켓 연결이 요청되면 await websocket.accept()를 사용하여 이를 비동기적으로 수락합니다.
            이는 await 표현은 연결 수립 과정이 완료될 때까지 함수 실행을 일시중지합니다.
- 데이터 수신과 송신: while True 무한 루프 안에서 await websocket.receive_text()를 호출하여 클라이언트로부터
                텍스트 메시지를 비동기적으로 수신합니다. 수신된 데이터는 data 변수에 저장되고 이어서 await websocket.send_text("
                Returned Message: {data} from Server")를 사용하여 수정된 메시지를 클라이언트에게 다시 보냅니다.
- 연결 종료 처리: 웹소켓의 연결이 끊어지면 WebSocketDisconnect 예외가 발생합니다. except WebSocketDisconnect 블록은
                이 예외를 잡아 연결 종료시 수행할 작업을 수행할 작업을 정의합니다. main.py의 코드에서 연결이 끊어졌을 때 콘솔에
                메시지를 출력합니다.


웹소켓 라우트를 구현할 때는 연결관리, 데이터 처리, 예외처리를 적절히 수행하여 안정적인 양방향 통신 채널을 제공해야합니다.

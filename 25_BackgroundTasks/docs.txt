FastAPI의 BackgroundTasks는 주로 긴 작업을 별도로 처리하는데 사용합니다.
이는 HTTP 응답을 먼저 보내고 나서도 서버에서 계속 작업을 수행할 수 있게 해줍니다. 이러한
방식은 사용자 경험을 향상시키며 서버 리소스를 효율적으로 활용할 수 있습니다.

예를 들어 사용자가 회원가입을 하면 '회원가입을 환영합니다.'라는 이메일을 보내야 할 수 있습니다.
이메일을 보내는 작업은 시간이 걸릴 수 있기 때문에 이 작업을 별도의 배경작업으로 처리하고 사용자
에게는 즉시 응답을 보낼 수 있습니다.

BackgroundTasks가 필요한 이유
- 비동기 처리: 메인 로직을 멈추지 않고 다른 작업을 병렬로 실행할 수 있습니다.
- 리소스 최적화: 주요 로직과 무관한 작업을 분리하여 리소스를 효율적으로 사용할 수 있습니다.

BackgroundTasks는 FastAPI의 내장 클래스로 이를 통해 별도의 스레드에서 실행될 작업들을 관리
하고 예약할 수 있습니다. 이 클래스는 FastAPI 애플리케이션에서 다양한 백그라운드 테스크를 쉽게
다룰 수 있도록 설계되어있습니다.
특히 I/O 작업이나 시간이 오래 걸리는 작업에 유용합니다.

add_task() 는 BackgroundTasks 클래스의 메서드 입니다. 이 메서드를 사용하면 실행할 함수와
그 함수에 전달할 매개변수를 지정할 수 있습니다.
매개변수는 위치 기반 또는 키워드 기반으로 전달합니다.
>> background_task.add_task(func, *args, **kwargs)
- func: 실행할 함수
- *args: 함수에 전달할 위치 기반 매개변수
- **kwargs: 함수에 전달할 키워드 기반 매개변수

- 기본 사용법: 함수만 전달하는 가장 기본적인 형태
>> background_task.add_task(some_function)

- 위치 기반 매개변수 전달: 함수와 그 함수의 위치 기반 매개변수를 전달합니다.
>> background_task.add_task(print, "Hello, World!")

- 키워드 기반 매개변수 전달: 함수와 키워드 매개변수를 전달합니다.
>> background_task.add_task(print, end="------end-----", sep="----sep----")

- 위치 및 키워드 기반 매개변수 함께 전달: 함수와 위치기반 매개변수 그리고 키워드 매개변수를 함께 전달합니다.
>> background_task.add_task(print, "Hello", "World!", sep="----sep----")

- 변수를 이용한 매개변수 전달: 이미 선언된 변수를 매개변수로 전달합니다.
>> my_var = "Hello"
    background_task.add_task(print, my_var)

- 여러 작업 예약: 여러 함수를 예약합니다.
>> background_task.add_task(print, "First Task")
    background_task.add_task(print, "Second Task")